using R2API.ItemDrop;
using RoR2;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace R2API {

    namespace ItemDropAPITools {

        public class DropList {
            /*
                The purpose of this class is to store the original drop lists for a run and to generate and store the master drop lists for a run.
                As well as changing and reverting the drop lists during a run.
                Instead of drop lists being created from scratch, the master drop lists are generated by modifying a vanilla drop list.
                Therefore items can be added to or removed from the original list.

                This is why I wanted a way to remove an item from both the add and remove lists, so the original behavior could be restored,
                    without first having to calculated whether an item would originally be apart the drop list.
                Becuse otherwise to restore original behavior, if the item was originally apart of the drop list, adding it to the add drop list,
                    would not change the master drop list.
                If it was not originally part of the drop list, adding it to the remove drop list would not change the master drop list.
                But you would have to know what it was going to do oringally to restore its original behavior.
                Being able to remove the item from both lists I thought would be the easier way to restore original behavior, but I was told having a function for this was confusing.

                The original lists are saved because both the player drops api and monster drop api will want apply alterations to the original lists.
                Rather than whichever api is executed second using the first api's altered lists as a base.
            */

            private static System.Reflection.FieldInfo availableTier1DropListInfo = typeof(Run).GetField("availableTier1DropList", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
            private static System.Reflection.FieldInfo availableTier2DropListInfo = typeof(Run).GetField("availableTier2DropList", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
            private static System.Reflection.FieldInfo availableTier3DropListInfo = typeof(Run).GetField("availableTier3DropList", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
            private static System.Reflection.FieldInfo availableEquipmentDropListInfo = typeof(Run).GetField("availableEquipmentDropList", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);

            public static bool OriginalListsSaved;
            public static List<PickupIndex> Tier1DropListOriginal = new List<PickupIndex>();
            public static List<PickupIndex> Tier2DropListOriginal = new List<PickupIndex>();
            public static List<PickupIndex> Tier3DropListOriginal = new List<PickupIndex>();
            public static List<PickupIndex> BossDropListOriginal = new List<PickupIndex>();
            public static List<PickupIndex> LunarDropListOriginal = new List<PickupIndex>();
            public static List<PickupIndex> EquipmentDropListOriginal = new List<PickupIndex>();
            public static List<PickupIndex> NormalEquipmentDropListOriginal = new List<PickupIndex>();
            public static List<PickupIndex> LunarEquipmentDropListOriginal = new List<PickupIndex>();
            public static List<PickupIndex> SpecialItemsOriginal = new List<PickupIndex>();
            public static List<PickupIndex> SpecialEquipmentOriginal = new List<PickupIndex>();

            private static List<PickupIndex> Tier1DropListBackup = new List<PickupIndex>();
            private static List<PickupIndex> Tier2DropListBackup = new List<PickupIndex>();
            private static List<PickupIndex> Tier3DropListBackup = new List<PickupIndex>();
            private static List<PickupIndex> EquipmentDropListBackup = new List<PickupIndex>();

            public List<PickupIndex> AvailableTier1DropList = new List<PickupIndex>();
            public List<PickupIndex> AvailableTier2DropList = new List<PickupIndex>();
            public List<PickupIndex> AvailableTier3DropList = new List<PickupIndex>();
            public List<PickupIndex> AvailableBossDropList = new List<PickupIndex>();
            public List<PickupIndex> AvailableLunarDropList = new List<PickupIndex>();
            public List<PickupIndex> AvailableEquipmentDropList = new List<PickupIndex>();
            public List<PickupIndex> AvailableNormalEquipmentDropList = new List<PickupIndex>();
            public List<PickupIndex> AvailableLunarEquipmentDropList = new List<PickupIndex>();
            public List<PickupIndex> AvailableSpecialItems = new List<PickupIndex>();
            public List<PickupIndex> AvailableSpecialEquipment = new List<PickupIndex>();

            public UnityEngine.Events.UnityEvent ListsGenerated = new UnityEngine.Events.UnityEvent();


            public List<PickupIndex> GetDropList(ItemTier itemTier) {
                if (itemTier == ItemTier.Tier1) {
                    return AvailableTier1DropList;
                } else if (itemTier == ItemTier.Tier2) {
                    return AvailableTier2DropList;
                } else if (itemTier == ItemTier.Tier3) {
                    return AvailableTier3DropList;
                } else if (itemTier == ItemTier.Boss) {
                    return AvailableBossDropList;
                } else if (itemTier == ItemTier.Lunar) {
                    return AvailableLunarDropList;
                } else {
                    return AvailableNormalEquipmentDropList;
                }
            }

            public static void OnRunStart(On.RoR2.Run.orig_Start orig, Run run) {
                OriginalListsSaved = false;
                orig(run);
            }

            /*
                Creates a new list containing all the items in another list.
                Returns a list containing none when given an empty list to fix a bug caused by having a list with a length of zero.
            */
            public static List<PickupIndex> BackupDropList(IEnumerable<PickupIndex> list) {
                return list.ToList().ToList();
            }

            //  Clears all the drop lists in the Run class.
            public void ClearAllLists(Run run) {
                run.availableItems.Clear();
                run.availableEquipment.Clear();
                run.availableTier1DropList.Clear();
                run.availableTier2DropList.Clear();
                run.availableTier3DropList.Clear();
                run.availableBossDropList.Clear();
                run.availableLunarDropList.Clear();
                run.availableEquipmentDropList.Clear();
                run.availableNormalEquipmentDropList.Clear();
                run.availableLunarEquipmentDropList.Clear();
            }

            //  Backs up all the original drop lists generated for this run.
            public void DuplicateDropLists(Run run) {
                if (!OriginalListsSaved) {
                    Tier1DropListOriginal = BackupDropList(run.availableTier1DropList);
                    Tier2DropListOriginal = BackupDropList(run.availableTier2DropList);
                    Tier3DropListOriginal = BackupDropList(run.availableTier3DropList);
                    LunarDropListOriginal = BackupDropList(run.availableLunarDropList);
                    EquipmentDropListOriginal = BackupDropList(run.availableEquipmentDropList);
                    NormalEquipmentDropListOriginal = BackupDropList(run.availableNormalEquipmentDropList);
                    LunarEquipmentDropListOriginal = BackupDropList(run.availableLunarEquipmentDropList);
                    BossDropListOriginal = BackupDropList(run.availableBossDropList);

                    /*
                    foreach (var bossItem in Catalog.SpecialItems) {
                        var pickupIndex = PickupCatalog.FindPickupIndex(bossItem);
                        if (!BossDropListOriginal.Contains(pickupIndex)) {
                            BossDropListOriginal.Add(pickupIndex);
                        }
                    }
                    */

                    SpecialItemsOriginal.Clear();
                    foreach (var itemIndex in Catalog.SpecialItems) {
                        if (run.availableItems.Contains(itemIndex)) {
                            SpecialItemsOriginal.Add(PickupCatalog.FindPickupIndex(itemIndex));
                        }
                    }
                    foreach (var itemIndex in Catalog.ScrapItems.Values) {
                        if (run.availableItems.Contains(itemIndex)) {
                            SpecialItemsOriginal.Add(PickupCatalog.FindPickupIndex(itemIndex));
                        }
                    }
                    
                    SpecialEquipmentOriginal.Clear();
                    foreach (var equipmentIndex in Catalog.EliteEquipment) {
                        var equipmentDef = EquipmentCatalog.GetEquipmentDef(equipmentIndex);
                        if (equipmentDef.unlockableDef == null || PreGameController.AnyUserHasUnlockable(equipmentDef.unlockableDef)) {
                            SpecialEquipmentOriginal.Add(PickupCatalog.FindPickupIndex(equipmentIndex));
                        }
                    }

                    OriginalListsSaved = true;
                }
            }

            //  Saves the adjusted drop lists, which are the master lists.
            internal void GenerateDropLists(
                List<PickupIndex> pickupsToAdd,
                List<PickupIndex> pickupsToRemove,
                List<PickupIndex> pickupsSpecialToAdd,
                List<PickupIndex> pickupsSpecialToRemove) {

                AvailableTier1DropList = BackupDropList(Tier1DropListOriginal);
                AvailableTier2DropList = BackupDropList(Tier2DropListOriginal);
                AvailableTier3DropList = BackupDropList(Tier3DropListOriginal);
                AvailableBossDropList = BackupDropList(BossDropListOriginal);
                AvailableLunarDropList = BackupDropList(LunarDropListOriginal);
                AvailableSpecialItems = BackupDropList(SpecialItemsOriginal);
                AvailableEquipmentDropList = BackupDropList(NormalEquipmentDropListOriginal);
                AvailableLunarEquipmentDropList.Clear();
                AvailableSpecialEquipment = BackupDropList(SpecialEquipmentOriginal);

                List<List<PickupIndex>> alterations = new List<List<PickupIndex>>() { pickupsToAdd, pickupsToRemove, pickupsSpecialToAdd, pickupsSpecialToRemove };
                for (int listIndex = 0; listIndex < alterations.Count; listIndex++) {
                    List<PickupIndex> currentList = alterations[listIndex];
                    bool special = listIndex > 1;
                    foreach (PickupIndex pickupIndex in currentList) {
                        List<PickupIndex> dropList = new List<PickupIndex>();
                        ItemIndex itemIndex = PickupCatalog.GetPickupDef(pickupIndex).itemIndex;
                        EquipmentIndex equipmentIndex = PickupCatalog.GetPickupDef(pickupIndex).equipmentIndex;
                        if (itemIndex != ItemIndex.None) {
                            ItemDef itemDef = ItemCatalog.GetItemDef(itemIndex);
                            if (!special) {
                                if (itemDef.tier == ItemTier.Tier1) {
                                    dropList = AvailableTier1DropList;
                                } else if (itemDef.tier == ItemTier.Tier2) {
                                    dropList = AvailableTier2DropList;
                                } else if (itemDef.tier == ItemTier.Tier3) {
                                    dropList = AvailableTier3DropList;
                                } else if (itemDef.tier == ItemTier.Boss) {
                                    dropList = AvailableBossDropList;
                                } else if (itemDef.tier == ItemTier.Lunar) {
                                    dropList = AvailableLunarDropList;
                                }
                            } else {
                                dropList = AvailableSpecialItems;
                            }
                        } else if (equipmentIndex != EquipmentIndex.None) {
                            EquipmentDef equipmentDef = EquipmentCatalog.GetEquipmentDef(equipmentIndex);
                            if (!special) {
                                if (equipmentDef.isLunar) {
                                    dropList = AvailableLunarDropList;
                                } else if (equipmentDef.isBoss) {
                                    dropList = AvailableBossDropList;
                                } else {
                                    dropList = AvailableEquipmentDropList;
                                }
                            } else {
                                dropList = AvailableSpecialEquipment;
                            }
                        }

                        if (listIndex % 2 == 0) {
                            if (dropList.Contains(pickupIndex) == false) {
                                dropList.Add(pickupIndex);
                            }
                        } else {
                            if (dropList.Contains(pickupIndex)) {
                                dropList.Remove(pickupIndex);
                            }
                        }
                    }
                }
                AvailableNormalEquipmentDropList = BackupDropList(AvailableEquipmentDropList);
                foreach (PickupIndex pickupIndex in AvailableLunarDropList) {
                    if (PickupCatalog.GetPickupDef(pickupIndex).equipmentIndex != EquipmentIndex.None) {
                        AvailableLunarEquipmentDropList.Add(pickupIndex);
                    }
                }
                ListsGenerated.Invoke();
            }
            
            //  Sets the drop lists in Run using the adjusted, master lists.
            public void SetItems(Run run) {
                foreach (var pickupIndex in AvailableTier1DropList) {
                    run.availableTier1DropList.Add(pickupIndex);
                    run.availableItems.Add(PickupCatalog.GetPickupDef(pickupIndex).itemIndex);
                }
                foreach (var pickupIndex in AvailableTier2DropList) {
                    run.availableTier2DropList.Add(pickupIndex);
                    run.availableItems.Add(PickupCatalog.GetPickupDef(pickupIndex).itemIndex);
                }
                foreach (var pickupIndex in AvailableTier3DropList) {
                    run.availableTier3DropList.Add(pickupIndex);
                    run.availableItems.Add(PickupCatalog.GetPickupDef(pickupIndex).itemIndex);
                }
                foreach (var pickupIndex in AvailableBossDropList) {
                    run.availableBossDropList.Add(pickupIndex);
                    ItemIndex itemIndex = PickupCatalog.GetPickupDef(pickupIndex).itemIndex;
                    EquipmentIndex equipmentIndex = PickupCatalog.GetPickupDef(pickupIndex).equipmentIndex;
                    if (itemIndex != ItemIndex.None) {
                        run.availableItems.Add(itemIndex);
                    } else if (equipmentIndex != EquipmentIndex.None) {
                        run.availableEquipment.Add(equipmentIndex);
                    }
                }
                foreach (var pickupIndex in AvailableLunarDropList) {
                    run.availableLunarDropList.Add(pickupIndex);
                    ItemIndex itemIndex = PickupCatalog.GetPickupDef(pickupIndex).itemIndex;
                    EquipmentIndex equipmentIndex = PickupCatalog.GetPickupDef(pickupIndex).equipmentIndex;
                    if (itemIndex != ItemIndex.None) {
                        run.availableItems.Add(itemIndex);
                    } else if (equipmentIndex != EquipmentIndex.None) {
                        run.availableEquipment.Add(equipmentIndex);
                    }
                }
                foreach (var pickupIndex in AvailableSpecialItems) {
                    run.availableItems.Add(PickupCatalog.GetPickupDef(pickupIndex).itemIndex);
                }
                foreach (var pickupIndex in AvailableEquipmentDropList) {
                    run.availableEquipmentDropList.Add(pickupIndex);
                    run.availableNormalEquipmentDropList.Add(pickupIndex);
                    run.availableEquipment.Add(PickupCatalog.GetPickupDef(pickupIndex).equipmentIndex);
                }
                foreach (var pickupIndex in AvailableLunarEquipmentDropList) {
                    run.availableLunarEquipmentDropList.Add(pickupIndex);
                    run.availableEquipment.Add(PickupCatalog.GetPickupDef(pickupIndex).equipmentIndex);
                }
                foreach (var pickupIndex in AvailableSpecialEquipment) {
                    run.availableEquipment.Add(PickupCatalog.GetPickupDef(pickupIndex).equipmentIndex);
                }
            }

            public static List<PickupIndex> ToPickupIndices(IEnumerable<ItemIndex> indices) {
                return indices.Select(PickupCatalog.FindPickupIndex).ToList();
            }

            public static List<PickupIndex> ToPickupIndices(IEnumerable<EquipmentIndex> indices) {
                return indices.Select(PickupCatalog.FindPickupIndex).ToList();
            }

            /*
                This will backup the four main drop lists in Run and then overwrite them.
                The intention is this function is used when changing the drop lists only temporarily.
            */
            public static void SetDropLists(IEnumerable<PickupIndex> givenTier1, IEnumerable<PickupIndex> givenTier2,
                IEnumerable<PickupIndex> givenTier3, IEnumerable<PickupIndex> givenEquipment) {

                var run = Run.instance;
                Tier1DropListBackup = BackupDropList(run.availableTier1DropList);
                Tier2DropListBackup = BackupDropList(run.availableTier2DropList);
                Tier3DropListBackup = BackupDropList(run.availableTier3DropList);
                EquipmentDropListBackup = BackupDropList(run.availableEquipmentDropList);

                availableTier1DropListInfo.SetValue(run, BackupDropList(givenTier1));
                availableTier2DropListInfo.SetValue(run, BackupDropList(givenTier2));
                availableTier3DropListInfo.SetValue(run, BackupDropList(givenTier3));
                availableEquipmentDropListInfo.SetValue(run, BackupDropList(givenEquipment));
            }

            //  This function will revert the four main drop lists in Run to how they were before they were changed temporarily.
            public static void RevertDropLists() {
                var run = Run.instance;
                availableTier1DropListInfo.SetValue(run, BackupDropList(Tier1DropListBackup));
                availableTier2DropListInfo.SetValue(run, BackupDropList(Tier2DropListBackup));
                availableTier3DropListInfo.SetValue(run, BackupDropList(Tier3DropListBackup));
                availableEquipmentDropListInfo.SetValue(run, BackupDropList(EquipmentDropListBackup));
            }
        }
    }
}
